---
title: "hw2_anna_hyunjung_kim"
format: html
editor: visual
---

# **Functions-Iterations-Dates-purr**

```{r}
library(tidyverse)
library(lubridate)
```

### Question 1

Write a function (using r code and structure demonstrated in class) to calculate a z score for a given observed value, a mean, and a standard deviation value. And then use your function to find a z score for the following problem. (Research the internet to find the formula used to calculate a z score)\
Observed value = 25.77, mean = 23.54, standard deviation = 2.442

```{r}

Q1_z_score <- function(x, mean, sd) {
  (x - mean) / sd
}

Q1_z_score(25.77, 23.54, 2.442)

```

### Question 2

Write a function to calculate the natural log of a number multiplied by the common log of the same number divided by the cube root of a given prime number, $\dfrac{\ln x \times \log x }{\sqrt[3]{p}}$.\
Use your function to find the answer if the number to be used for both log expressions is 32 and the given prime number is 11, $x = 32, \;\;p=11$.\
Also use R code to round your answer to the nearest tenth

```{r}
Q2_log <- function(x, p) {
  (log(x) * log10(x)) / (p^(1/3))
}

Q2_log(32, 11)

```

### Question 3

Use and show R coding to calculate the standard deviation for each variable of the data table `mtcars` using the `Special For Loop Method`, which includes three components:

-   Output – an object to store the results

-   Sequence – the set of items to loop through

-   Body – the operations performed in each iteration

```{r}
output <- numeric()

sequence <- names(mtcars)

for ( i in sequence) {
  output[i] <- sd(mtcars[[i]])
}

output


```

### Question 4:

Write only one line of the code to return only the leap years of years 2024, 3021, 2000 or 1800, 800, 5050, 600 and 7156. using subsetting with `[]` and without using built-in functions.

-   If the year is divisible by four, it's a leap year.

-   But if the year can be divided by 100 as well as four, it's not a leap year.

-   However, if the year is divisible by 400, it is a leap year.

```{r}

year <- c(2024, 3021, 2000, 1800, 800, 5050, 600, 7156)

leap_year <- year[
  (year %% 4 == 0 & year %% 100 != 0) |
  (year %% 400 == 0)
]

leap_year

```

### Question 5:

Generate a sequence of dates from **January 1, 2015** to **December 31, 2025**, spaced by every **two months**. Extract the **year**, **quarter**, and **ISO week number** for each date.

```{r}
Q5_date <- seq(ymd("2015-01-01"), ymd("2025-12-31"), by = "2 months")

Q5_date 

Q5_data2<- tibble(
  date = Q5_date ,
  year = year(Q5_date ),
  quarter = quarter(Q5_date ),
  iso_week = isoweek(Q5_date )
)

Q5_data2
```

### Question 6:

Given the following dates, compute the difference in **months** and **weeks** between each consecutive pair.

``` r
sample_dates <- c("2018-03-15", "2020-07-20", "2023-01-10", "2025-09-05")
```

```{r}
sample_dates <- c("2018-03-15", "2020-07-20", "2023-01-10", "2025-09-05")
sample_dates <- ymd(sample_dates)

sample_dates

start <- sample_dates[1:3]
end <- sample_dates[2:4]

dur <- as.duration(end - start)

dur

weeks <- dur / dweeks(1)
months <- dur / dmonths(1)


tibble(
  start = start,
  end = end,
  weeks = round(weeks, 1),
  months = round(months, 1)
)
```

### Question 7: Higher-Order Functions with purrr

Using `map()` and `map_dbl()`, compute the **mean**, **median**, and **standard deviation** for each numeric vector in the following list:

``` r
num_lists <- list(c(4, 16, 25, 36, 49), c(2.3, 5.7, 8.1, 11.4), c(10, 20, 30, 40, 50))
```

```{r}
num_lists <- list(c(4, 16, 25, 36, 49), c(2.3, 5.7, 8.1, 11.4), c(10, 20, 30, 40, 50))

Q7_mean <- map(num_lists, mean)
Q7_mean

map_dbl(num_lists, median)

map_dbl(num_lists, sd)
```

### Question 8: Combining lubridate and purrr

Given a list of mixed date formats, use `map()` and `possibly()` from `purrr` to safely convert them to **Date** format and extract the **month name**.

``` r
date_strings <- list("2023-06-10", "2022/12/25", "15-Aug-2021", "InvalidDate")
```

```{r}
date_strings <- list("2023-06-10", "2022/12/25", "15-Aug-2021", "InvalidDate")

parse_date_time(date_strings, c("ymd", "Y/m/d", "d-b-Y"))

Q8_date_change <- function(x) {
  parse_date_time(x, orders = c("ymd", "Y/m/d", "d-b-Y"))
}

#Q8_date_change("2023-06-10")

possibly_Q8 <- possibly(Q8_date_change, otherwise = NA)

result1 <- map(date_strings, possibly_Q8)

result1

result_month<- map_dbl(result1, function(x) {
  if (is.na(x)) 
    NA 
  else 
    month(x)
})

#month_numbers

result_name <- map_chr(result_month, function(x) {
  if (is.na(x))
    NA 
  else 
    month.abb[x]
})

result_name 
```
